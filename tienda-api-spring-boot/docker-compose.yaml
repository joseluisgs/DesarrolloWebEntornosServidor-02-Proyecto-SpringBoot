# Lo necesario para ejecutar la aplicación en producción
services:

  # PostgresSQL
  postgres-db:
    container_name: tienda-db_postgres
    image: postgres:12-alpine
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - tienda-network

  # MongoDB
  mongo-db:
    container_name: tienda-db_mongo
    image: mongo:5.0
    restart: always
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ./database/tienda.js:/docker-entrypoint-initdb.d/tienda.js:ro
      - mongo-data:/data/db
    networks:
      - tienda-network

  # Redis
  redis-db:
    container_name: tienda-db_redis
    image: redis:7-alpine
    restart: always
    env_file: .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - redis-data:/data
    networks:
      - tienda-network

  # Servicio de la API REST
  tienda-api-rest:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: tienda-api-rest
    restart: always
    env_file: .env
    ports:
      - ${API_PORT}:3000
    volumes:
      - storage-dir:/app/storage-dir
    networks:
      - tienda-network
    depends_on:
      - postgres-db
      - mongo-db
      - redis-db

# Volúmenes para persistencia de datos
volumes:
  storage-dir:
  postgres-data:
  mongo-data:
  redis-data:

# Red para conectar los contenedores
networks:
  tienda-network:
    driver: bridge